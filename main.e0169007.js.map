{"version":3,"sources":["js/main.js"],"names":["board","me","computer","boxes","spots","document","querySelectorAll","replayBtn","querySelector","outputArea","initializeApp","style","display","Array","from","keys","for","i","length","innerText","removeProperty","addEventListener","turnClick","square","target","id","turn","checkWin","checkTie","bestSpot","squareId","player","getElementById","gameWon","gameOver","plays","reduce","a","e","concat","entries","index","win","every","elem","indexOf","backgroundColor","removeEventListener","declareWinner","who","emptySquares","filter","s","minimax","newBoard","availSpots","score","moves","bestMove","move","result","push","bestScore"],"mappings":";AAwGA,SAAA,EAAA,EAAA,GAAA,OAAA,EAAA,IAAA,EAAA,EAAA,IAAA,IAAA,SAAA,IAAA,MAAA,IAAA,UAAA,wDAAA,SAAA,EAAA,EAAA,GAAA,GAAA,OAAA,YAAA,OAAA,IAAA,uBAAA,OAAA,UAAA,SAAA,KAAA,GAAA,CAAA,IAAA,EAAA,GAAA,GAAA,EAAA,GAAA,EAAA,OAAA,EAAA,IAAA,IAAA,IAAA,EAAA,EAAA,EAAA,OAAA,cAAA,GAAA,EAAA,EAAA,QAAA,QAAA,EAAA,KAAA,EAAA,QAAA,GAAA,EAAA,SAAA,GAAA,GAAA,IAAA,MAAA,GAAA,GAAA,EAAA,EAAA,EAAA,QAAA,IAAA,GAAA,MAAA,EAAA,QAAA,EAAA,SAAA,QAAA,GAAA,EAAA,MAAA,GAAA,OAAA,GAAA,SAAA,EAAA,GAAA,GAAA,MAAA,QAAA,GAAA,OAAA,EAxGA,IAAIA,EACEC,EAAK,IACLC,EAAW,IACXC,EAAQ,CACb,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAGFC,EAAQC,SAASC,iBAAiB,QAClCC,EAAUF,SAASG,cAAc,WACjCC,EAAWJ,SAASG,cAAc,WAIxC,SAASE,IACRH,EAAUI,MAAMC,QAAU,OAC1BH,EAAWE,MAAMC,QAAU,OAC3BZ,EAAQa,MAAMC,KAAKD,MAAM,GAAGE,QAC5BX,EAAMY,IACD,IAAA,IAAIC,EAAI,EAAGA,EAAIb,EAAMc,OAAQD,IACjCb,EAAMa,GAAGE,UAAY,GACrBf,EAAMa,GAAGN,MAAMS,eAAe,oBAC9BhB,EAAMa,GAAGI,iBAAiB,QAASC,GAAW,GAIhD,SAASA,EAAUC,GACoB,iBAA3BvB,EAAMuB,EAAOC,OAAOC,MAC9BC,EAAKH,EAAOC,OAAOC,GAAIxB,GAClB0B,EAAS3B,EAAOC,IAAQ2B,KAAYF,EAAKG,IAAY3B,IAlB5DQ,IAsBA,IAAMgB,EAAK,SAACI,EAAUC,GACrB/B,EAAM8B,GAAYC,EAClB1B,SAAS2B,eAAeF,GAAUX,UAAYY,EAC1CE,IAAAA,EAAUN,EAAS3B,EAAO+B,GAC1BE,GAASC,EAASD,IAGjBN,EAAS,SAAC3B,EAAO+B,GAClBI,IAAAA,EAAQnC,EAAMoC,OAAO,SAACC,EAAGC,EAAGrB,GAC9BqB,OAAAA,IAAMP,EAAUM,EAAEE,OAAOtB,GAAKoB,GAAG,IAC/BJ,EAAU,KAHkB,GAAA,EAAA,GAAA,EAAA,OAAA,EAAA,IAIP9B,IAAAA,IAAiB,EAAjBA,EAAAA,EAAMqC,UAAW,OAAA,cAAA,GAAA,EAAA,EAAA,QAAA,MAAA,GAAA,EAAA,CAAA,IAAA,EAAA,EAAA,EAAA,MAAA,GAAhCC,EAAgC,EAAA,GACrCC,GADqC,EAAA,GACjCC,MAAM,SAAAC,GAAQT,OAAAA,EAAMU,QAAQD,IAAS,IAAI,CAChDX,EAAU,CAACQ,MAAOA,EAAOV,OAAQA,GACjC,QAP8B,MAAA,GAAA,GAAA,EAAA,EAAA,EAAA,QAAA,IAAA,GAAA,MAAA,EAAA,QAAA,EAAA,SAAA,QAAA,GAAA,EAAA,MAAA,GAUzBE,OAAAA,GAGFC,EAAS,SAAAD,GAAU,IAAA,GAAA,EAAA,GAAA,EAAA,OAAA,EAAA,IACN9B,IAAAA,IAAsB,EAAtBA,EAAAA,EAAM8B,EAAQQ,OAAQ,OAAA,cAAA,GAAA,EAAA,EAAA,QAAA,MAAA,GAAA,EAAA,CAA/BA,IAAAA,EAA+B,EAAA,MACvCpC,SAAS2B,eAAeS,GAAO9B,MAAMmC,gBACpCb,EAAQF,QAAU9B,EAAK,OAAS,OAHV,MAAA,GAAA,GAAA,EAAA,EAAA,EAAA,QAAA,IAAA,GAAA,MAAA,EAAA,QAAA,EAAA,SAAA,QAAA,GAAA,EAAA,MAAA,GAKnB,IAAA,IAAIgB,EAAI,EAAGA,EAAIb,EAAMc,OAAQD,IACjCb,EAAMa,GAAG8B,oBAAoB,QAASzB,GAAW,GAIlD0B,EAAcf,EAAQF,QAAU9B,EAAK,WAAa,aAClDM,EAAUI,MAAMC,QAAU,QAEvBL,EAAUc,iBAAiB,QAAQX,IAGjCsC,EAAc,SAAAC,GACnBxC,EAAWE,MAAMC,QAAU,QAC3BP,SAASG,cAAc,iBAAiBW,UAAY8B,GAG/CC,EAAa,WACXlD,OAAAA,EAAMmD,OAAO,SAAAC,GAAK,MAAY,iBAALA,KAG3BvB,EAAS,WACPwB,OAAAA,EAAQrD,EAAOE,GAAUuC,OAG3Bb,EAAS,WACVsB,GAAyB,GAAzBA,IAAehC,OAAa,CAC1B,IAAA,IAAID,EAAI,EAAGA,EAAIb,EAAMc,OAAQD,IACjCb,EAAMa,GAAGN,MAAMmC,gBAAkB,QACjC1C,EAAMa,GAAG8B,oBAAoB,QAASzB,GAAW,GAO3C,OALP0B,EAAc,aAEfzC,EAAUI,MAAMC,QAAU,QAE3BL,EAAUc,iBAAiB,QAAQX,IAC1B,EAED,OAAA,GAGF2C,EAAQ,SAARA,EAASC,EAAUvB,GACpBwB,IAAAA,EAAaL,IAEbvB,GAAAA,EAAS2B,EAAUrD,GACf,MAAA,CAACuD,OAAQ,IACV,GAAI7B,EAAS2B,EAAUpD,GACtB,MAAA,CAACsD,MAAO,IACT,GAA0B,IAAtBD,EAAWrC,OACd,MAAA,CAACsC,MAAO,GAGX,IADDC,IAmBAC,EAnBAD,EAAQ,GACHxC,EAAI,EAAGA,EAAIsC,EAAWrC,OAAQD,IAAK,CACvC0C,IAAAA,EAAO,GAIP5B,GAHJ4B,EAAKlB,MAAQa,EAASC,EAAWtC,IACjCqC,EAASC,EAAWtC,IAAMc,EAEtBA,GAAU7B,EAAU,CACnB0D,IAAAA,EAASP,EAAQC,EAAUrD,GAC/B0D,EAAKH,MAAQI,EAAOJ,UACd,CACFI,IAAAA,EAASP,EAAQC,EAAUpD,GAC/ByD,EAAKH,MAAQI,EAAOJ,MAGrBF,EAASC,EAAWtC,IAAM0C,EAAKlB,MAE/BgB,EAAMI,KAAKF,GAIT5B,GAAAA,IAAW7B,EAET,IADA4D,IAAAA,GAAa,IACT7C,EAAI,EAAGA,EAAIwC,EAAMvC,OAAQD,IAC5BwC,EAAMxC,GAAGuC,MAAQM,IACpBA,EAAYL,EAAMxC,GAAGuC,MACrBE,EAAWzC,QAKT,IADA6C,IAAAA,EAAY,IACR7C,EAAI,EAAGA,EAAIwC,EAAMvC,OAAQD,IAC5BwC,EAAMxC,GAAGuC,MAAQM,IACpBA,EAAYL,EAAMxC,GAAGuC,MACrBE,EAAWzC,GAKPwC,OAAAA,EAAMC","file":"main.e0169007.js","sourceRoot":"..\\src","sourcesContent":["let board;\r\nconst me = 'o';\r\nconst computer = 'x';\r\nconst boxes = [\r\n\t[0, 1, 2],\r\n\t[3, 4, 5],\r\n\t[6, 7, 8],\r\n\t[0, 3, 6],\r\n\t[1, 4, 7],\r\n\t[2, 5, 8],\r\n\t[0, 4, 8],\r\n\t[6, 4, 2]\r\n]\r\n\r\nconst spots = document.querySelectorAll('.box');\r\nconst replayBtn=document.querySelector('#replay');\r\nconst outputArea=document.querySelector(\".result\");\r\ninitializeApp();\r\n\r\n\r\nfunction initializeApp() {\r\n\treplayBtn.style.display = \"none\";\r\n\toutputArea.style.display = \"none\";\r\n\tboard = Array.from(Array(9).keys());\r\n\tspots.for\r\n\tfor (let i = 0; i < spots.length; i++) {\r\n\t\tspots[i].innerText = '';\r\n\t\tspots[i].style.removeProperty('background-color');\r\n\t\tspots[i].addEventListener('click', turnClick, false);\r\n\t}\r\n}\r\n\r\nfunction turnClick(square) {\r\n\tif (typeof board[square.target.id] == 'number') {\r\n\t\tturn(square.target.id, me)\r\n\t\tif (!checkWin(board, me) && !checkTie()) turn(bestSpot(), computer);\r\n\t}\r\n}\r\n\r\nconst turn=(squareId, player)=> {\r\n\tboard[squareId] = player;\r\n\tdocument.getElementById(squareId).innerText = player;\r\n\tlet gameWon = checkWin(board, player)\r\n\tif (gameWon) gameOver(gameWon)\r\n}\r\n\r\nconst checkWin=(board, player)=> {\r\n\tlet plays = board.reduce((a, e, i) =>\r\n\t\t(e === player) ? a.concat(i) : a, []);\r\n\tlet gameWon = null;\r\n\tfor (let [index, win] of boxes.entries()) {\r\n\t\tif (win.every(elem => plays.indexOf(elem) > -1)) {\r\n\t\t\tgameWon = {index: index, player: player};\r\n\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\treturn gameWon;\r\n}\r\n\r\nconst gameOver=gameWon=> {\r\n\tfor (let index of boxes[gameWon.index]) {\r\n\t\tdocument.getElementById(index).style.backgroundColor =\r\n\t\t\tgameWon.player == me ? \"blue\" : \"red\";\r\n\t}\r\n\tfor (let i = 0; i < spots.length; i++) {\r\n\t\tspots[i].removeEventListener('click', turnClick, false);\r\n\t}\r\n\r\n\t\r\n\tdeclareWinner(gameWon.player == me ? \"You win!\" : \"You lose.\");\r\n\treplayBtn.style.display = \"block\";\r\n\t\r\n    replayBtn.addEventListener('click',initializeApp);\r\n}\r\n\r\nconst declareWinner=who=> {\r\n\toutputArea.style.display = \"block\";\r\n\tdocument.querySelector(\".result .text\").innerText = who;\r\n}\r\n\r\nconst emptySquares=()=> {\r\n\treturn board.filter(s => typeof s == 'number');\r\n}\r\n\r\nconst bestSpot=()=> {\r\n\treturn minimax(board, computer).index;\r\n}\r\n\r\nconst checkTie=()=> {\r\n\tif (emptySquares().length == 0) {\r\n\t\tfor (let i = 0; i < spots.length; i++) {\r\n\t\t\tspots[i].style.backgroundColor = \"green\";\r\n\t\t\tspots[i].removeEventListener('click', turnClick, false);\r\n\t\t}\r\n\t\tdeclareWinner(\"Tie Game!\")\r\n\t\t\r\n\treplayBtn.style.display = \"block\";\r\n\t\r\nreplayBtn.addEventListener('click',initializeApp);\r\n\t\treturn true;\r\n\t}\r\n\treturn false;\r\n}\r\n\r\nconst minimax=(newBoard, player)=> {\r\n\tlet availSpots = emptySquares();\r\n\r\n\tif (checkWin(newBoard, me)) {\r\n\t\treturn {score: -10};\r\n\t} else if (checkWin(newBoard, computer)) {\r\n\t\treturn {score: 10};\r\n\t} else if (availSpots.length === 0) {\r\n\t\treturn {score: 0};\r\n\t}\r\n\tlet moves = [];\r\n\tfor (let i = 0; i < availSpots.length; i++) {\r\n\t\tlet move = {};\r\n\t\tmove.index = newBoard[availSpots[i]];\r\n\t\tnewBoard[availSpots[i]] = player;\r\n\r\n\t\tif (player == computer) {\r\n\t\t\tlet result = minimax(newBoard, me);\r\n\t\t\tmove.score = result.score;\r\n\t\t} else {\r\n\t\t\tlet result = minimax(newBoard, computer);\r\n\t\t\tmove.score = result.score;\r\n\t\t}\r\n\r\n\t\tnewBoard[availSpots[i]] = move.index;\r\n\r\n\t\tmoves.push(move);\r\n\t}\r\n\r\n\tlet bestMove;\r\n\tif(player === computer) {\r\n\t\tlet bestScore = -10000;\r\n\t\tfor(let i = 0; i < moves.length; i++) {\r\n\t\t\tif (moves[i].score > bestScore) {\r\n\t\t\t\tbestScore = moves[i].score;\r\n\t\t\t\tbestMove = i;\r\n\t\t\t}\r\n\t\t}\r\n\t} else {\r\n\t\tlet bestScore = 10000;\r\n\t\tfor(let i = 0; i < moves.length; i++) {\r\n\t\t\tif (moves[i].score < bestScore) {\r\n\t\t\t\tbestScore = moves[i].score;\r\n\t\t\t\tbestMove = i;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn moves[bestMove];\r\n}"]}